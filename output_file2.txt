<
   ir_version: 10,
   opset_import: ["" : 17],
   producer_name: "pytorch",
   producer_version: "2.3.0"
>
main_graph (float[1,2,1] onnx__Gather_1, float[1,2] target_scale, float[3,2] net_blocks_0_T_backcast, float[3,1] net_blocks_0_T_forecast, float[32,2] net_blocks_0_fc_0_weight, float[32] net_blocks_0_fc_0_bias, float[32,32] net_blocks_0_fc_2_1_weight, float[32] net_blocks_0_fc_2_1_bias, float[32,32] net_blocks_0_fc_4_1_weight, float[32] net_blocks_0_fc_4_1_bias, float[32,2] net_blocks_1_fc_0_weight, float[32] net_blocks_1_fc_0_bias, float[32,32] net_blocks_1_fc_2_1_weight, float[32] net_blocks_1_fc_2_1_bias, float[32,32] net_blocks_1_fc_4_1_weight, float[32] net_blocks_1_fc_4_1_bias, float[32,2] net_blocks_2_fc_0_weight, float[32] net_blocks_2_fc_0_bias, float[32,32] net_blocks_2_fc_2_1_weight, float[32] net_blocks_2_fc_2_1_bias, float[32,32] net_blocks_2_fc_4_1_weight, float[32] net_blocks_2_fc_4_1_bias, float[1,2] net_blocks_3_S_backcast, float[1,1] net_blocks_3_S_forecast, float[512,2] net_blocks_3_fc_0_weight, float[512] net_blocks_3_fc_0_bias, float[512,512] net_blocks_3_fc_2_1_weight, float[512] net_blocks_3_fc_2_1_bias, float[512,512] net_blocks_3_fc_4_1_weight, float[512] net_blocks_3_fc_4_1_bias, float[512,2] net_blocks_4_fc_0_weight, float[512] net_blocks_4_fc_0_bias, float[512,512] net_blocks_4_fc_2_1_weight, float[512] net_blocks_4_fc_2_1_bias, float[512,512] net_blocks_4_fc_4_1_weight, float[512] net_blocks_4_fc_4_1_bias, float[512,2] net_blocks_5_fc_0_weight, float[512] net_blocks_5_fc_0_bias, float[512,512] net_blocks_5_fc_2_1_weight, float[512] net_blocks_5_fc_2_1_bias, float[512,512] net_blocks_5_fc_4_1_weight, float[512] net_blocks_5_fc_4_1_bias, float[32,3] onnx__MatMul_198, float[32,3] onnx__MatMul_199, float[32,3] onnx__MatMul_200, float[512,1] onnx__MatMul_201, float[512,1] onnx__MatMul_202, float[512,1] onnx__MatMul_203) => (float[cast_output_0000_dynamic_axes_1,1] output_var) 
{
   identity_output_0001 = Identity (net_blocks_3_S_backcast)
   identity_output_0002 = Identity (net_blocks_3_S_forecast)
   identity_output_0003 = Identity (net_blocks_3_S_backcast)
   identity_output_0004 = Identity (net_blocks_0_T_forecast)
   identity_output_0005 = Identity (net_blocks_0_T_backcast)
   identity_output_0006 = Identity (net_blocks_0_T_forecast)
   identity_output_0007 = Identity (net_blocks_0_T_backcast)
   constant_output_0000 = Constant <value_ tensor = int64 {0}> ()
   gather_output_0000 = Gather <axis_ int = 2> (onnx__Gather_1, constant_output_0000)
   constant_output_0001 = Constant <value_ tensor = int64 {1}> ()
   gemm_output_0000 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (gather_output_0000, net_blocks_0_fc_0_weight, net_blocks_0_fc_0_bias)
   relu_output_0000 = Relu (gemm_output_0000)
   gemm_output_0001 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0000, net_blocks_0_fc_2_1_weight, net_blocks_0_fc_2_1_bias)
   relu_output_0001 = Relu (gemm_output_0001)
   gemm_output_0002 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0001, net_blocks_0_fc_4_1_weight, net_blocks_0_fc_4_1_bias)
   relu_output_0002 = Relu (gemm_output_0002)
   matmul_output_0000 = MatMul (relu_output_0002, onnx__MatMul_198)
   gemm_output_0003 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0000, net_blocks_0_T_backcast)
   gemm_output_0004 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0000, net_blocks_0_T_forecast)
   concat_output_0000 = Concat <axis_ int = 1> (gemm_output_0003, gemm_output_0004)
   sub_output_0000 = Sub (gather_output_0000, gemm_output_0003)
   constant_output_0002 = Constant <value_ tensor = float[1,1] {0}> ()
   gemm_output_0005 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0000, net_blocks_0_T_forecast, constant_output_0002)
   gemm_output_0006 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (sub_output_0000, net_blocks_1_fc_0_weight, net_blocks_1_fc_0_bias)
   relu_output_0003 = Relu (gemm_output_0006)
   gemm_output_0007 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0003, net_blocks_1_fc_2_1_weight, net_blocks_1_fc_2_1_bias)
   relu_output_0004 = Relu (gemm_output_0007)
   gemm_output_0008 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0004, net_blocks_1_fc_4_1_weight, net_blocks_1_fc_4_1_bias)
   relu_output_0005 = Relu (gemm_output_0008)
   matmul_output_0001 = MatMul (relu_output_0005, onnx__MatMul_199)
   gemm_output_0009 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0001, identity_output_0007)
   gemm_output_0010 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0001, identity_output_0006)
   concat_output_0001 = Concat <axis_ int = 1> (gemm_output_0009, gemm_output_0010)
   sub_output_0001 = Sub (sub_output_0000, gemm_output_0009)
   gemm_output_0011 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0001, identity_output_0006, gemm_output_0005)
   gemm_output_0012 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (sub_output_0001, net_blocks_2_fc_0_weight, net_blocks_2_fc_0_bias)
   relu_output_0006 = Relu (gemm_output_0012)
   gemm_output_0013 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0006, net_blocks_2_fc_2_1_weight, net_blocks_2_fc_2_1_bias)
   relu_output_0007 = Relu (gemm_output_0013)
   gemm_output_0014 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0007, net_blocks_2_fc_4_1_weight, net_blocks_2_fc_4_1_bias)
   relu_output_0008 = Relu (gemm_output_0014)
   matmul_output_0002 = MatMul (relu_output_0008, onnx__MatMul_200)
   gemm_output_0015 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0002, identity_output_0005)
   gemm_output_0016 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0002, identity_output_0004)
   concat_output_0002 = Concat <axis_ int = 1> (gemm_output_0015, gemm_output_0016)
   sub_output_0002 = Sub (sub_output_0001, gemm_output_0015)
   gemm_output_0017 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0002, identity_output_0004, gemm_output_0011)
   gemm_output_0018 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (sub_output_0002, net_blocks_3_fc_0_weight, net_blocks_3_fc_0_bias)
   relu_output_0009 = Relu (gemm_output_0018)
   gemm_output_0019 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0009, net_blocks_3_fc_2_1_weight, net_blocks_3_fc_2_1_bias)
   relu_output_0010 = Relu (gemm_output_0019)
   gemm_output_0020 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0010, net_blocks_3_fc_4_1_weight, net_blocks_3_fc_4_1_bias)
   relu_output_0011 = Relu (gemm_output_0020)
   matmul_output_0003 = MatMul (relu_output_0011, onnx__MatMul_201)
   gemm_output_0021 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0003, net_blocks_3_S_backcast)
   gemm_output_0022 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0003, net_blocks_3_S_forecast)
   concat_output_0003 = Concat <axis_ int = 1> (gemm_output_0021, gemm_output_0022)
   sub_output_0003 = Sub (sub_output_0002, gemm_output_0021)
   gemm_output_0023 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0003, net_blocks_3_S_forecast, gemm_output_0017)
   gemm_output_0024 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (sub_output_0003, net_blocks_4_fc_0_weight, net_blocks_4_fc_0_bias)
   relu_output_0012 = Relu (gemm_output_0024)
   gemm_output_0025 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0012, net_blocks_4_fc_2_1_weight, net_blocks_4_fc_2_1_bias)
   relu_output_0013 = Relu (gemm_output_0025)
   gemm_output_0026 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0013, net_blocks_4_fc_4_1_weight, net_blocks_4_fc_4_1_bias)
   relu_output_0014 = Relu (gemm_output_0026)
   matmul_output_0004 = MatMul (relu_output_0014, onnx__MatMul_202)
   gemm_output_0027 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0004, identity_output_0003)
   gemm_output_0028 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0004, identity_output_0002)
   concat_output_0004 = Concat <axis_ int = 1> (gemm_output_0027, gemm_output_0028)
   sub_output_0004 = Sub (sub_output_0003, gemm_output_0027)
   gemm_output_0029 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0004, identity_output_0002, gemm_output_0023)
   gemm_output_0030 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (sub_output_0004, net_blocks_5_fc_0_weight, net_blocks_5_fc_0_bias)
   relu_output_0015 = Relu (gemm_output_0030)
   gemm_output_0031 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0015, net_blocks_5_fc_2_1_weight, net_blocks_5_fc_2_1_bias)
   relu_output_0016 = Relu (gemm_output_0031)
   gemm_output_0032 = Gemm <alpha_ int = 1, beta_ int = 1, transB_ int = 1> (relu_output_0016, net_blocks_5_fc_4_1_weight, net_blocks_5_fc_4_1_bias)
   relu_output_0017 = Relu (gemm_output_0032)
   matmul_output_0005 = MatMul (relu_output_0017, onnx__MatMul_203)
   gemm_output_0033 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0005, identity_output_0001)
   gemm_output_0034 = Gemm <alpha_ int = 1, beta_ int = 0> (matmul_output_0005, identity_output_0000)
   concat_output_0005 = Concat <axis_ int = 1> (gemm_output_0033, gemm_output_0034)
   sub_output_0005 = Sub (sub_output_0004, gemm_output_0033)
   gemm_output_0035 = Gemm <alpha_ int = 1, beta_ int = 1> (matmul_output_0005, identity_output_0000, gemm_output_0029)
   gather_output_0001 = Gather <axis_ int = 1> (target_scale, constant_output_0001)
   constant_output_0003 = Constant <value_ tensor = int64[1] {1}> ()
   unsqueeze_output_0000 = Unsqueeze (gather_output_0001, constant_output_0003)
   mul_output_0000 = Mul (gemm_output_0035, unsqueeze_output_0000)
   gather_output_0002 = Gather <axis_ int = 1> (target_scale, constant_output_0000)
   constant_output_0004 = Constant <value_ tensor = int64[1] {1}> ()
   unsqueeze_output_0001 = Unsqueeze (gather_output_0002, constant_output_0004)
   add_output_0000 = Add (mul_output_0000, unsqueeze_output_0001)
   relu_output_0018 = Relu (add_output_0000)
   cast_output_0000 = Cast <to_ int = 1> (relu_output_0018)
   sub_output_0006 = Sub (gather_output_0000, sub_output_0005)
   mul_output_0001 = Mul (sub_output_0006, unsqueeze_output_0000)
   add_output_0001 = Add (mul_output_0001, unsqueeze_output_0001)
   relu_output_0019 = Relu (add_output_0001)
   cast_output_0001 = Cast <to_ int = 1> (relu_output_0019)
   constant_output_0005 = Constant <value_ tensor = float[1,1,3] {0,0,0}> ()
   constant_output_0006 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0002 = Unsqueeze (concat_output_0000, constant_output_0006)
   constant_output_0007 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0003 = Unsqueeze (concat_output_0001, constant_output_0007)
   constant_output_0008 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0004 = Unsqueeze (concat_output_0002, constant_output_0008)
   concat_output_0006 = Concat <axis_ int = 0> (constant_output_0005, unsqueeze_output_0002, unsqueeze_output_0003, unsqueeze_output_0004)
   constant_output_0009 = Constant <value_ tensor = int64[1] {0}> ()
   reducesum_output_0000 = ReduceSum <keepdims_ int = 0> (concat_output_0006, constant_output_0009)
   mul_output_0002 = Mul (reducesum_output_0000, unsqueeze_output_0000)
   add_output_0002 = Add (mul_output_0002, unsqueeze_output_0001)
   relu_output_0020 = Relu (add_output_0002)
   cast_output_0002 = Cast <to_ int = 1> (relu_output_0020)
   constant_output_0010 = Constant <value_ tensor = float[1,1,3] {0,0,0}> ()
   constant_output_0011 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0005 = Unsqueeze (concat_output_0003, constant_output_0011)
   constant_output_0012 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0006 = Unsqueeze (concat_output_0004, constant_output_0012)
   constant_output_0013 = Constant <value_ tensor = int64[1] {0}> ()
   unsqueeze_output_0007 = Unsqueeze (concat_output_0005, constant_output_0013)
   concat_output_0007 = Concat <axis_ int = 0> (constant_output_0010, unsqueeze_output_0005, unsqueeze_output_0006, unsqueeze_output_0007)
   reducesum_output_0001 = ReduceSum <keepdims_ int = 0> (concat_output_0007, constant_output_0009)
   mul_output_0003 = Mul (reducesum_output_0001, unsqueeze_output_0000)
   add_output_0003 = Add (mul_output_0003, unsqueeze_output_0001)
   relu_output_0021 = Relu (add_output_0003)
   cast_output_0003 = Cast <to_ int = 1> (relu_output_0021)
   constant_output_0014 = Constant <value_ tensor = float[1,1,3] {0,0,0}> ()
   reducesum_output_0002 = ReduceSum <keepdims_ int = 0> (constant_output_0014, constant_output_0009)
   mul_output_0004 = Mul (reducesum_output_0002, unsqueeze_output_0000)
   add_output_0004 = Add (mul_output_0004, unsqueeze_output_0001)
   relu_output_0022 = Relu (add_output_0004)
   cast_output_0004 = Cast <to_ int = 1> (relu_output_0022)
}